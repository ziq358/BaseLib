apply plugin: 'com.android.library'
apply plugin: 'com.novoda.bintray-release'

android {
    compileSdkVersion rootProject.ext.android.compileSdkVersion
    buildToolsVersion rootProject.ext.android.buildToolsVersion
    defaultConfig {
        minSdkVersion rootProject.ext.android.minSdkVersion
        targetSdkVersion rootProject.ext.android.targetSdkVersion
        versionCode rootProject.ext.android["versionCode"]
        versionName rootProject.ext.android["versionName"]

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        javaCompileOptions {
            annotationProcessorOptions {
                includeCompileClasspath true
            }
        }
    }

    signingConfigs {
        config {
            keyAlias 'zaiqiang'
            keyPassword 'zaiqiang'
            storeFile file('../signature.jks')
            storePassword 'zaiqiang'
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.config
        }
    }

    lintOptions {
        abortOnError false
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

dependencies {
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test:runner:1.1.0-alpha4'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.1.0-alpha4'

    api fileTree(dir: 'libs', include: ['*.jar'])
    api rootProject.ext.dependencies["appcompat-v7"]
    api rootProject.ext.dependencies["recyclerview-v7"]
    api 'org.greenrobot:eventbus:3.1.1'
    api ('org.bitbucket.b_c:jose4j:0.5.2'){
        exclude group:'org.slf4j', module: 'slf4j-api'
        transitive = true
    }

    //由于 在lib中R 文件的 id 没有定， 所以 无法 通过注解绑定，也就不需要 annotationProcessor了，
    // 在application项目中 只需要 annotationProcessor 引用 编译规则编译 就行了
    api(rootProject.ext.dependencies["butterknife"]) {
        exclude module: 'support-annotations'
        exclude module: 'support-compat'
    }

    api rootProject.ext.dependencies["dagger2"]
    annotationProcessor rootProject.ext.dependencies["dagger2-compiler"]
//    api rootProject.ext.dependencies["dagger2-android"]
//    api rootProject.ext.dependencies["dagger2-android-support"]
//    annotationProcessor rootProject.ext.dependencies["dagger2-android-processor"]

    api 'com.itextpdf:itextg:5.5.10'

    api rootProject.ext.dependencies["retrofit"]
    api rootProject.ext.dependencies["rxjava2"]// 必要rxjava2依赖
    api rootProject.ext.dependencies["rxandroid"]// 必要rxandrroid依赖，切线程时需要用到
    api rootProject.ext.dependencies["adapter-rxjava2"] // 必要依赖，和Rxjava结合必须用到，下面会提到
    api rootProject.ext.dependencies["converter-gson"]// 必要依赖，解析json字符所用
    api rootProject.ext.dependencies["logging-interceptor"] //非必要依赖， log依赖，如果需要打印OkHttpLog需要添加

    api rootProject.ext.dependencies["baseRecyclerViewAdapterHelper"]
    api (rootProject.ext.dependencies["glide"]){
        exclude group: "com.android.support"
    }
    annotationProcessor rootProject.ext.dependencies["glide-compiler"]
    api rootProject.ext.dependencies["kprogresshud"]

    api rootProject.ext.dependencies["rxlifecycle"]
    api rootProject.ext.dependencies["rxlifecycle-android"]
    api rootProject.ext.dependencies["rxlifecycle-components"]
}

publish {
    userOrg = 'zaiqiangxiaohuli'
    repoName = 'anZhuo'
    groupId = 'com.ziq.base'
    artifactId = 'base'
    publishVersion = rootProject.ext.android["versionName"]
    desc = 'zaiqiang base lib for android develop'
    website = 'https://github.com/ziq358/BaseLib'
}